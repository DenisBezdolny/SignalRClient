import { Injectable } from '@angular/core';
import { BehaviorSubject, Subject} from 'rxjs';
import * as signalR from '@microsoft/signalr';


export interface Participant {
  id: string;
  name: string;
  publicIp?: string;  // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ IP
  publicPort?: number;  // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
}

@Injectable({
  providedIn: 'root',
})
export class WebSocketService {
  public connection: signalR.HubConnection;
  public roomName: string = "";
  private participants: Participant[] = [];
  public currentUserId: string | null = null;
  public isConnected: boolean = false;
  private connectionStateSubject = new BehaviorSubject<boolean>(false);
  public connectionState$ = this.connectionStateSubject.asObservable();

   // –î–æ–±–∞–≤–ª—è–µ–º Subject –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π WebRTC
  public offerReceivedSubject = new Subject<{ senderId: string, offer: string }>();
  // –î–æ–±–∞–≤–ª—è–µ–º Subject –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ WebRTC
  public answerReceivedSubject = new Subject<{ senderId: string, answer: string }>();
  // Subject –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ P2P
  public initiateP2PConnectionSubject = new Subject<{ participantId: string, publicIp: string, publicPort: number }>();
  // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç Subject —Ä—è–¥–æ–º —Å –¥—Ä—É–≥–∏–º–∏
  public iceCandidateReceivedSubject = new Subject<{ senderId: string, candidate: string }>();

  // –°–æ–∑–¥–∞–µ–º BehaviorSubject –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö P2P
  public p2pStatusChanged: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);


  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ P2P
  private stunServer: string = "stun:stun.l.google.com:19302";
  public isConnectionReady: boolean = false;

  constructor() {
    console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocketService");
    this.connection = new signalR.HubConnectionBuilder()
      .withUrl('https://localhost:7283/notifications')
      .configureLogging(signalR.LogLevel.Information)
      .withAutomaticReconnect([0, 2000, 5000, 10000])
      .build();
  }

  public startConnection(): void {
    this.connection
      .start()
      .then(() => {
        this.isConnected = true;
        this.isConnectionReady = true;
        this.connectionStateSubject.next(true);
        this.registerEventHandlers();

        this.connection.invoke("RequestSTUNInfo")
          .catch(err => console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ STUN:", err));

        this.connection.invoke("GetConnectionId")
          .then((id: string) => {
            this.currentUserId = id;
          })
          .catch(err => console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ConnectionId:", err));
          
      })
      .catch((err) => {
        this.isConnected = false;
        this.isConnectionReady = false;
        this.connectionStateSubject.next(false);
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", err);
      });
  }

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ
  public joinRoom(roomName: string): Promise<void> {
    return this.connection.invoke('JoinRoom', roomName, 10)
      .then(() => {
        this.roomName = roomName;
        this.getPublicIP();
      })
      .catch((err) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∫–æ–º–Ω–∞—Ç—É:', err);
      });
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–ª—É—á–∞–π–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ
  public joinRandomRoom(): Promise<void> {
    return this.connection.invoke('JoinRandomRoom', 10)
      .then(() => {
        this.getPublicIP();
      })
      .catch((err) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err);
      });
  }

  public createRoom(maxSize: number): Promise<void>{
    return this.connection.invoke('CreatePrivateRoom',maxSize)
    .then(() => {
      this.getPublicIP();
    })
    .catch((err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err);
    });
  }

  public leaveRoom(roomName: string): void {
    console.log(`üì§ –í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã: ${roomName}`);
    this.connection.invoke('LeaveRoom', roomName)
      .then(() => {
        this.roomName = "";
      })
      .catch((err: Error) => console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã:', err));
  }

  public onMessageReceived(callback: (sender: string, message: string) => void): void {
    this.connection.on("ReceiveMessage", (sender: string, message: string) => {
      console.log(`üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${sender}: ${message}`);
      const match = message.match(/Welcome to room (\w+)\./);
      if (match) {
        this.roomName = match[1];
        console.log("[WebSocket] üè† –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", this.roomName);
      }
  
      // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ WebRTC
      if (message.startsWith('offer:')) {
        const offer = message.slice(6);  // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'offer:'
        this.offerReceivedSubject.next({ senderId: sender, offer }); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Subject
      }
  
      callback(sender, message);
    });
  }

  public onParticipantsUpdated(callback: (participants: Participant[]) => void): void {
    this.connection.on("UpdateRoomParticipants", (participants: Participant[]) => {
      console.log("üë• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:", participants);

      // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    participants.forEach((participant) => {
      console.log(`–£—á–∞—Å—Ç–Ω–∏–∫: ${participant.name}, ID: ${participant.id}, IP: ${participant.publicIp}, –ü–æ—Ä—Ç: ${participant.publicPort}`);
    });

      this.participants = participants;
      callback(participants);
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç—É
  public sendMessage(roomName: string, message: string): void {
    this.connection.invoke('SendMessageToRoom', roomName, message)
      .then(() => console.log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"))
      .catch((err: Error) => console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', err));
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ IP
  public async getPublicIP(): Promise<void> {
    console.log("üåé –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ IP...");
    try {
      const peerConnection = new RTCPeerConnection({
        iceServers: [{ urls: "stun:stun.l.google.com:19302" }]  // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è STUN-—Å–µ—Ä–≤–µ—Ä–∞
      });
  
      // –°–æ–∑–¥–∞–µ–º data channel –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
      peerConnection.createDataChannel("test");
      const offer = await peerConnection.createOffer();
      await peerConnection.setLocalDescription(offer);
  
      peerConnection.onicecandidate = async (event) => {
        if (event.candidate) {
          console.log("üîé ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞–π–¥–µ–Ω:", event.candidate.candidate);
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π IP –∏ –ø–æ—Ä—Ç –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
          const candidate = event.candidate.candidate;
          const parts = candidate.split(" ");
          const ip = parts[4];
          const port = parts[5];
          if (!ip.includes(".local") && !ip.startsWith("192.168")) {
            this.sendNATTraversalInfo(ip, parseInt(port));
          }
        }
      };
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ IP:", error);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ NAT –¥–∞–Ω–Ω—ã—Ö
  public sendNATTraversalInfo(publicIp: string, publicPort: number): void {
    if (this.isConnected) {
      this.connection.invoke("SendNATTraversalInfo", this.roomName, publicIp, publicPort)
        .then(() => console.log("‚úÖ NAT –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã"))
        .catch((err: Error) => console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ NAT –¥–∞–Ω–Ω—ã—Ö:", err));
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ
  public getOtherClientsInRoom(): Participant[] {
    if (!this.currentUserId) return this.participants;
    return this.participants.filter(p => p.id !== this.currentUserId);
  }

  public onNATInfoReceived(callback: (connectionId: string, publicIp: string, publicPort: number) => void): void {
    this.connection.on("ReceiveNATInfo", (connectionId: string, publicIp: string, publicPort: number) => {
      console.log(`üì° –ü–æ–ª—É—á–µ–Ω—ã NAT-–¥–∞–Ω–Ω—ã–µ –æ—Ç ${connectionId}: ${publicIp}:${publicPort}`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ NAT-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
      const participant = this.participants.find(p => p.id === connectionId);
      if (participant) {
        participant.publicIp = publicIp;
        participant.publicPort = publicPort;

        // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        console.log(`–£—á–∞—Å—Ç–Ω–∏–∫ ${participant.name} (ID: ${participant.id}) - IP: ${participant.publicIp}, –ü–æ—Ä—Ç: ${participant.publicPort}`);

        
      }
      // –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ–±—ã —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏—Ç—å—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã
      console.log(`–ú–ï–¢–û–î onNATInfoReceived –ü—É–±–ª–∏—á–Ω—ã–π IP: ${publicIp}, –ü–æ—Ä—Ç: ${publicPort}`);

      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ—Å–ª–∏ –ø—É–±–ª–∏—á–Ω—ã–π IP –∏ –ø–æ—Ä—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º P2P-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      if (participant && participant.id !== this.currentUserId && participant.publicIp && participant.publicPort) {
        console.log("–ò–Ω–∏—Ü–∏–∞—Ü–∏—è P2P-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");
        this.initiateP2PConnectionSubject.next({ 
          participantId: participant.id,
          publicIp: participant.publicIp,
          publicPort: participant.publicPort
        });
      }
      callback(connectionId, publicIp, publicPort);
    });
  }

  public getPublicIpForParticipant(participantId: string): string | null {
    // –ù–∞–π–¥–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID –∏ –≤–µ—Ä–Ω–∏—Ç–µ –µ–≥–æ –ø—É–±–ª–∏—á–Ω—ã–π IP
    const participant = this.participants.find(p => p.id === participantId);
    return participant ? participant.publicIp ?? null : null;  // –ï—Å–ª–∏ publicIp –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ undefined, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
  }
  
  public getPublicPortForParticipant(participantId: string): number | null {
    // –ù–∞–π–¥–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID –∏ –≤–µ—Ä–Ω–∏—Ç–µ –µ–≥–æ –ø—É–±–ª–∏—á–Ω—ã–π –ø–æ—Ä—Ç
    const participant = this.participants.find(p => p.id === participantId);
    return participant ? participant.publicPort ?? null : null;  // –ï—Å–ª–∏ publicPort –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ undefined, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
  }
  
  public sendIceCandidate(roomName: string, targetConnectionId: string, candidate: string): Promise<void> {
    return this.connection.invoke("SendIceCandidate", roomName, targetConnectionId, candidate)
      .then(() => console.log("‚úÖ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"))
      .catch((err) => console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç–∞:", err));
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑ —Ö–∞–±–∞
  private registerEventHandlers(): void {
    this.connection.on("ReceiveMessage", (sender: string, message: string) => {
      console.log(`üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${sender}: ${message}`);
    });
      // Listen for STUN server response
    this.connection.on("ReceiveStunServer", (stunServer) => {
      console.log(`üì° –ü–æ–ª—É—á–µ–Ω STUN-—Å–µ—Ä–≤–µ—Ä: ${stunServer}`);
      this.stunServer = stunServer;
    });    

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è ReceiveOffer
  this.connection.on("ReceiveOffer", (senderId: string, offer: string) => {
    console.log(`üì© –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç ${senderId}:`, offer);
    this.offerReceivedSubject.next({ senderId, offer });
  });

  this.connection.on("ReceiveAnswer", (senderId: string, answer: string) => {
    console.log(`üì© –ü–æ–ª—É—á–µ–Ω answer –æ—Ç ${senderId}:`, answer);
    this.answerReceivedSubject.next({ senderId, answer });
  });
  

  this.connection.on("ReceiveIceCandidate", (senderId: string, candidate: string) => {
    console.log(`üì° –ü–æ–ª—É—á–µ–Ω ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç ${senderId}:`, candidate);
    this.iceCandidateReceivedSubject.next({ senderId, candidate });
  });

    this.connection.on("ReceiveTURNServer", (turnServer: string) => {
      console.log(`üì° –ü–æ–ª—É—á–µ–Ω TURN-—Å–µ—Ä–≤–µ—Ä: ${turnServer}`);
    });
  }
}
