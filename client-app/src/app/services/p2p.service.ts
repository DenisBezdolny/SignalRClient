import { Injectable } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { WebSocketService } from './websocket.service';

@Injectable({
  providedIn: 'root'
})
export class P2PService {
  private peerConnections: { [id: string]: RTCPeerConnection } = {};
  public currentUserP2PId: string | null = null;
  private dataChannels: { [id: string]: RTCDataChannel } = {};  // –î–æ–±–∞–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è DataChannels
  private pendingIceCandidates: { [targetId: string]: RTCIceCandidateInit[] } = {};
  public p2pConnectedSubject = new BehaviorSubject<boolean>(false);
  public p2pConnected$ = this.p2pConnectedSubject.asObservable();
  public p2pMessageSubject = new Subject<{ senderId: string, message: string }>();
  private stunServer: string = "stun:stun.l.google.com:19302";

  constructor(private webSocketService: WebSocketService) {
    this.webSocketService.offerReceivedSubject.subscribe(({ senderId, offer }) => {
      this.handleReceivedOffer(senderId, offer);  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    });
    this.webSocketService.answerReceivedSubject.subscribe(({ senderId, answer }) => {
      this.handleReceivedAnswer(senderId, answer);
    }); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏–≥–Ω–∞–ª, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å P2P-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    this.webSocketService.initiateP2PConnectionSubject.subscribe(({ participantId, publicIp, publicPort }) => {
      this.createOffer(participantId, publicIp, publicPort);
    });
    // –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç—ã
  this.webSocketService.iceCandidateReceivedSubject.subscribe(({ senderId, candidate }) => {
    console.log(`[P2PService] –ü–æ–ª—É—á–µ–Ω ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç ${senderId}:`, candidate);
    const pc = this.peerConnections[senderId];
    if (pc) {
      // –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
      try {
        const candidateObj = new RTCIceCandidate(JSON.parse(candidate));
        pc.addIceCandidate(candidateObj)
          .then(() => {
            console.log(`[P2PService] ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è ${senderId}`);
          })
          .catch((err) => {
            console.error(`[P2PService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è ${senderId}:`, err);
          });
      } catch (error) {
        console.error(`[P2PService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è ${senderId}:`, error);
      }
    } else {
      console.warn(`[P2PService] –ù–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ PeerConnection –¥–ª—è ${senderId}. –°–æ—Ö—Ä–∞–Ω—è–µ–º ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç –≤ –±—É—Ñ–µ—Ä.`);
      this.pendingIceCandidates[senderId] = this.pendingIceCandidates[senderId] || [];
      try {
        const candidateObj = JSON.parse(candidate);
        this.pendingIceCandidates[senderId].push(candidateObj);
      } catch (error) {
        console.error(`[P2PService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ ${senderId}:`, error);
      }
    }
  });
  }

  private setupDataChannel(targetId: string, dataChannel: RTCDataChannel): void {
    dataChannel.onopen = () => {
      console.log(`[ondatachannel] DataChannel –æ—Ç–∫—Ä—ã—Ç –¥–ª—è ${targetId}`);
      console.log(`[ondatachannel] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ DataChannel: ${dataChannel.readyState}`);
      this.p2pConnectedSubject.next(true);
    };
    dataChannel.onmessage = (event) => {
      console.log(`[ondatachannel] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ P2P –¥–ª—è ${targetId}:`, event.data);
      // –≠–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Subject:
      this.p2pMessageSubject.next({ senderId: targetId, message: event.data });
    };
    dataChannel.onclose = () => {
      console.log(`[ondatachannel] DataChannel –∑–∞–∫—Ä—ã—Ç –¥–ª—è ${targetId}`);
      this.p2pConnectedSubject.next(false);
    };
  }

  // –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç RTCPeerConnection
  public createPeerConnection(
    targetId: string,
    publicIp?: string,
    publicPort?: number,
    isOfferer: boolean = false
  ): RTCPeerConnection | null {
    console.log(`[createPeerConnection] –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è ${targetId} —Å publicIp: ${publicIp}, publicPort: ${publicPort}`);
    
    const config = { iceServers: [{ urls: this.stunServer }] };
    const peerConnection = new RTCPeerConnection(config);
    this.peerConnections[targetId] = peerConnection;
    
    console.log(`[createPeerConnection] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PeerConnection –¥–ª—è ${targetId}. ICE —Å–µ—Ä–≤–µ—Ä: ${this.stunServer}`);
    
    console.log(`[createPeerConnection] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: ${peerConnection.iceConnectionState}`);
  
    
    // –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (onicecandidate, onicegatheringstatechange, oniceconnectionstatechange, —Å–æ–∑–¥–∞–Ω–∏–µ DataChannel –∏ —Ç.–¥.)
    peerConnection.onicecandidate = (event) => {
      console.log(`[onicecandidate] –°–æ–±—ã—Ç–∏–µ –¥–ª—è ${targetId} —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º:`, event);
      if (event.candidate) {
        const candidateJSON = event.candidate.toJSON();
        console.log(`[onicecandidate] –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç –¥–ª—è ${targetId}:`, candidateJSON);
        
        if (peerConnection.remoteDescription === null) {
          // –ë—É—Ñ–µ—Ä–∏–∑—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –µ—Å–ª–∏ remoteDescription –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
          this.pendingIceCandidates[targetId] = this.pendingIceCandidates[targetId] || [];
          this.pendingIceCandidates[targetId].push(candidateJSON);
          console.log(`[onicecandidate] ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç–ª–æ–∂–µ–Ω –¥–ª—è ${targetId} (remoteDescription === null).`);
        } else {
          // –í—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
          console.log(`[onicecandidate] –ü–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è ${targetId}:`);
          console.log(`    signalingState: ${peerConnection.signalingState}`);
          console.log(`    iceConnectionState: ${peerConnection.iceConnectionState}`);
          console.log(`    remoteDescription type: ${peerConnection.remoteDescription?.type}`);
          console.log(`    ICE candidate:`, candidateJSON);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç —á–µ—Ä–µ–∑ SignalR
          this.webSocketService.sendIceCandidate(this.webSocketService.roomName, targetId, JSON.stringify(candidateJSON));

          peerConnection.addIceCandidate(event.candidate)
            .then(() => {
              console.log(`[onicecandidate] ‚úÖ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è ${targetId}.`);
            })
            .catch((err) => {
              console.error(`[onicecandidate] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è ${targetId}:`, err);
              console.error(`[onicecandidate] Stack trace: ${err.stack}`);
              console.error(`[onicecandidate] –¢–µ–∫—É—â–µ–µ signalingState: ${peerConnection.signalingState}`);
              console.error(`[onicecandidate] –¢–µ–∫—É—â–µ–µ iceConnectionState: ${peerConnection.iceConnectionState}`);
              console.error(`[onicecandidate] –¢–µ–∫—É—â–∏–π remoteDescription:`, peerConnection.remoteDescription);
            });
        }
      } else {
        console.log(`[onicecandidate] –ù–µ—Ç ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è ${targetId}, event.candidate - undefined.`);
      }
    };
       
    peerConnection.onicegatheringstatechange = () => {
      console.log(`[onicegatheringstatechange] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±–æ—Ä–∞ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è ${targetId}: ${peerConnection.iceGatheringState}`);
    };
    
    peerConnection.oniceconnectionstatechange = () => {
      console.log(`[oniceconnectionstatechange] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è ${targetId}: ${peerConnection.iceConnectionState}`);
      if (peerConnection.iceConnectionState === 'connected') {
        console.log(`[oniceconnectionstatechange] P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${targetId}`);
        this.p2pConnectedSubject.next(true);
      } else {
        this.p2pConnectedSubject.next(false);
      }
    };
    
    // –°–æ–∑–¥–∞–µ–º DataChannel —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã —è–≤–ª—è–µ–º—Å—è offerer
    if (isOfferer) {
      const dataChannel = peerConnection.createDataChannel('chat');
      this.dataChannels[targetId] = dataChannel;
      this.setupDataChannel(targetId, dataChannel);
    } else {
      // –ù–∞ —Å—Ç–æ—Ä–æ–Ω–µ answerer –æ–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ ondatachannel
      peerConnection.ondatachannel = (event) => {
        console.log(`[ondatachannel] –ü–æ–ª—É—á–µ–Ω DataChannel –¥–ª—è ${targetId}:`, event.channel.readyState);
        this.setupDataChannel(targetId, event.channel);
        this.dataChannels[targetId] = event.channel;
      };
    }

    peerConnection.onconnectionstatechange = () => {
      console.log(`[onconnectionstatechange] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è ${targetId}: ${peerConnection.connectionState}`);
    };

    console.log(`[createPeerConnection] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è PeerConnection –¥–ª—è ${targetId}`);
    return peerConnection;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ DataChannel
  public sendMessage(targetId: string, message: string): void {
    const dataChannel = this.dataChannels[targetId];
    if (dataChannel && dataChannel.readyState === 'open') {
      console.log("üì° Sending message via P2P:", message);
      dataChannel.send(message);
    } else {
      console.error("‚ùå P2P DataChannel –Ω–µ –æ—Ç–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.");
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
  public flushPendingIceCandidates(targetId: string, peerConnection: RTCPeerConnection): void {
    const pending = this.pendingIceCandidates[targetId];
    if (pending && pending.length > 0) {
      console.log(`[flushPendingIceCandidates] –î–ª—è ${targetId} –Ω–∞–π–¥–µ–Ω–æ ${pending.length} –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.`);
      pending.forEach((candidateInit, index) => {
        console.log(`[flushPendingIceCandidates] [Candidate #${index}] –ü–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:`, candidateInit);
        console.log(`[flushPendingIceCandidates] [Candidate #${index}] –¢–µ–∫—É—â–µ–µ remoteDescription:`, peerConnection.remoteDescription);
        console.log(`[flushPendingIceCandidates] [Candidate #${index}] signalingState: ${peerConnection.signalingState}`);
        console.log(`[flushPendingIceCandidates] [Candidate #${index}] iceConnectionState: ${peerConnection.iceConnectionState}`);
        peerConnection.addIceCandidate(new RTCIceCandidate(candidateInit))
          .then(() => {
            console.log(`[flushPendingIceCandidates] [Candidate #${index}] ‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è ${targetId}.`);
          })
          .catch((err) => {
            console.error(`[flushPendingIceCandidates] [Candidate #${index}] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è ${targetId}:`, err);
            console.error(`[flushPendingIceCandidates] [Candidate #${index}] Stack trace: ${err.stack}`);
          });
      });
      delete this.pendingIceCandidates[targetId];
    } else {
      console.log(`[flushPendingIceCandidates] –î–ª—è ${targetId} –Ω–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.`);
    }
  }

  public async handleReceivedOffer(senderId: string, offer: string): Promise<void> {
    console.log(`üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç ${senderId}`);
    
    let peerConnection = this.peerConnections[senderId];
    if (!peerConnection) {
      const newPeer = this.createPeerConnection(senderId);
      if (!newPeer) return;
      peerConnection = newPeer;
    } else {
      console.log(`[handleReceivedOffer] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è ${senderId}`);
    }
  
    try {
      await peerConnection.setRemoteDescription(new RTCSessionDescription(JSON.parse(offer)));
      console.log(`[handleReceivedOffer] –£–¥–∞–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${senderId}`);
      // –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ remoteDescription, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç—ã (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
      this.flushPendingIceCandidates(senderId, peerConnection);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è ${senderId}:`, error);
      return;
    }
  
    const answer = await peerConnection.createAnswer();
    await peerConnection.setLocalDescription(answer);
    console.log(`üì© –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ ${senderId}:`, JSON.stringify(answer));
    await this.webSocketService.connection.invoke("SendAnswer", this.webSocketService.roomName, senderId, JSON.stringify(answer));
  }
  

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (offer) ‚Äî —Å—Ç–æ—Ä–æ–Ω–∞ offerer
  public createOffer(targetId: string, publicIp?: string, publicPort?: number): void {
    if (this.peerConnections[targetId]) {
      console.log(`[createOffer] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è ${targetId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
      return;
    }
    // –ü–µ—Ä–µ–¥–∞–µ–º NAT-–¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    const peerConnection = this.createPeerConnection(targetId, publicIp, publicPort, true);
    if (!peerConnection) return;

    peerConnection.createOffer()
      .then((offer) => {
        console.log(`üì© –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è ${targetId}:`, offer);
        return peerConnection.setLocalDescription(offer).then(() => offer);
      })
      .then((offer) => {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ WebSocket
        this.webSocketService.connection.invoke(
          "SendOffer",
          this.webSocketService.roomName,
          targetId,
          JSON.stringify(offer)
        );
      })
      .catch((err) => {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:", err);
      });
    }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ (answer) ‚Äî —Å—Ç–æ—Ä–æ–Ω–∞ offerer
  public async handleReceivedAnswer(senderId: string, answer: string): Promise<void> {
    console.log(`üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ answer –æ—Ç ${senderId}`);
    const peerConnection = this.peerConnections[senderId];
    if (!peerConnection) {
      console.error(`‚ùå –ù–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è ${senderId}`);
      return;
    }
    try {
      await peerConnection.setRemoteDescription(new RTCSessionDescription(JSON.parse(answer)));
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è ${senderId} (answer)`);
      this.flushPendingIceCandidates(senderId, peerConnection);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è (answer) –¥–ª—è ${senderId}:`, error);
    }
  }

  
  public cleanupConnection(targetId: string): void {
    console.log("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ peerConnections:", Object.keys(this.peerConnections));
    console.log("–ü–µ—Ä–µ–¥–∞–Ω–Ω–∞—è targetId:", targetId);
    if (this.peerConnections[targetId]) {
      console.log(`[cleanupConnection] –û—á–∏—Å—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è ${targetId}`);
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º PeerConnection –∏ DataChannel, –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
      if (this.dataChannels[targetId]) {
        this.dataChannels[targetId].close();
        delete this.dataChannels[targetId];
      }
      this.peerConnections[targetId].close();
      delete this.peerConnections[targetId];
    }
    if (this.pendingIceCandidates[targetId]) {
      delete this.pendingIceCandidates[targetId];
    }
  }
  



}
