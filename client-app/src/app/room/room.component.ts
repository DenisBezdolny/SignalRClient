import { Component, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { WebSocketService, Participant } from '../services/websocket.service';
import { P2PService } from '../services/p2p.service';  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å P2P

@Component({
  selector: 'app-room',
  templateUrl: './room.component.html',
  styleUrls: ['./room.component.css'],
  standalone: true,
  imports: [CommonModule, FormsModule],
})
export class RoomComponent implements OnInit {
  public messages: string[] = [];
  public roomName: string = '';
  public newMessage: string = '';
  public isSignalRConnected: boolean = false;
  public isP2PConnected: boolean = false;
  public participants: Participant[] = [];

  constructor(
    private webSocketService: WebSocketService,
    private p2pService: P2PService  // –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º P2P-—Å–µ—Ä–≤–∏—Å
  ) {}

  ngOnInit(): void {
    this.webSocketService.startConnection();

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ SignalR —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    this.webSocketService.connectionState$.subscribe((state) => {
      this.isSignalRConnected = state;
    });

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    this.p2pService.p2pConnected$.subscribe((state) => {
      this.isP2PConnected = state;
    });

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ SignalR
    this.webSocketService.onMessageReceived((sender: string, message: string) => {
      this.messages.push(`${sender}: ${message}`);
    });
    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ P2P-—Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ P2PService
    this.p2pService.p2pMessageSubject.subscribe(({ senderId, message }) => {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ P2P-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–º–µ—á–∞—è, —á—Ç–æ –æ–Ω–æ –ø—Ä–∏—à–ª–æ –ø–æ P2P
      this.messages.push(`(P2P) ${senderId}: ${message}`);
    });
  
    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ NAT-–¥–∞–Ω–Ω—ã—Ö
    this.webSocketService.onNATInfoReceived((connectionId: string, publicIp: string, publicPort: number) => {
      console.log(`–ü–æ–ª—É—á–µ–Ω—ã NAT-–¥–∞–Ω–Ω—ã–µ: ${publicIp}:${publicPort} –æ—Ç ${connectionId}`);
    });

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    this.webSocketService.onParticipantsUpdated((participants: Participant[]) => {
      this.participants = participants;
      
      if (participants.length > 1) {
        participants.forEach(participant => {
          if (participant.id !== this.webSocketService.currentUserId) {
            const publicIp = this.webSocketService.getPublicIpForParticipant(participant.id);
            const publicPort = this.webSocketService.getPublicPortForParticipant(participant.id);
            
            if (publicIp && publicPort) {
              ;  // –°–æ–∑–¥–∞–µ–º P2P-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–∞–∂–¥—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
            }
          }
        });
      }
    });
  }

  public joinRoom(): void {
    if (this.roomName) {
      this.webSocketService.joinRoom(this.roomName)
        .then(() => {
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç—É: ${this.roomName}`);
        })
        .catch((err: Error) => console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∫–æ–º–Ω–∞—Ç—É:', err));
    }
  }

  public joinRandomRoom(): void {
    this.webSocketService.joinRandomRoom()
      .then(() => {
        console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–ª—É—á–∞–π–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ");
      })
      .catch((err) => console.error('‚ùå –û—à–∏–±–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', err));
  }

  public leaveRoom(): void {
    if (this.webSocketService.roomName) {
      this.webSocketService.leaveRoom(this.webSocketService.roomName);
    }
  }

  sendMessage(): void {
    if (this.webSocketService.roomName && this.newMessage) {
      this.webSocketService.sendMessage(this.webSocketService.roomName, this.newMessage);
      this.newMessage = '';
    }
  }

  sendByP2P(): void {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
    const otherClients = this.webSocketService.getOtherClientsInRoom();
  
    if (this.isP2PConnected && otherClients.length > 0) {
      console.log("üì° Sending message via P2P:", this.newMessage);
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ P2P
      this.p2pService.sendMessage(otherClients[0].id, this.newMessage);  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
      this.newMessage = '';
    } else {
      console.error("‚ùå P2P-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.");
    }
  }
  
}
